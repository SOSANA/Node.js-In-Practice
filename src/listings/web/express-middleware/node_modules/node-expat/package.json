{
  "name": "node-expat",
  "version": "2.1.4",
  "main": "./lib/node-expat",
  "description": "NodeJS binding for fast XML parsing.",
  "keywords": [
    "xml",
    "sax",
    "expat",
    "libexpat",
    "parse",
    "parsing"
  ],
  "scripts": {
    "test": "vows --spec ./test.js",
    "install": "node-gyp rebuild"
  },
  "dependencies": {
    "nan": "~0.6.0"
  },
  "devDependencies": {
    "vows": ">=0.5.12"
  },
  "repository": {
    "type": "git",
    "path": "git://github.com/node-xmpp/node-expat.git"
  },
  "homepage": "http://github.com/node-xmpp/node-expat",
  "bugs": {
    "url": "http://github.com/node-xmpp/node-expat/issues"
  },
  "author": {
    "name": "Astro",
    "email": "astro@spaceboyz.net",
    "url": "http://spaceboyz.net/~astro/"
  },
  "maintainers": [
    {
      "name": "Lloyd Watkin",
      "email": "lloyd@evilprofessor.co.uk",
      "url": "http://www.evilprofessor.co.uk"
    }
  ],
  "contributors": [
    {
      "name": "Stephan Maka"
    },
    {
      "name": "Derek Hammer"
    },
    {
      "name": "Iein Valdez"
    },
    {
      "name": "Peter KÃ¶rner"
    },
    {
      "name": "Camilo Aguilar"
    },
    {
      "name": "Michael Weibel"
    },
    {
      "name": "Alexey Zhuchkov"
    },
    {
      "name": "Satyam Shekhar"
    },
    {
      "name": "Dhruv Matani"
    },
    {
      "name": "Andreas Botsikas"
    },
    {
      "name": "Tom Hughes-Croucher"
    },
    {
      "name": "Nathan Rajlich"
    }
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "engines": {
    "node": ">=0.8"
  },
  "gypfile": true,
  "readme": "# node-expat \n\n## Motivation \n\nYou use [node.js](http://github.com/ry/node) for speed? You process\nXML streams? Then you want the fastest XML parser: [libexpat](http://expat.sourceforge.net/)!\n\n## Speed \n\nA stupid speed test is supplied in `bench.js`. We measure how many\n25-byte elements a SAX parser can process:\n\n- [node-xml](http://github.com/robrighter/node-xml) (pure JavaScript): 23,000 el/s\n- [libxmljs](http://github.com/polotek/libxmljs) (libxml2 binding): 77,000 el/s\n- [node-expat](http://github.com/astro/node-expat) (libexpat binding, this): 113,000 el/s\n\nThese numbers were recorded on a Core 2 2400 MHz.\n\n## Instructions \n\nInstall node-expat:\n\n    npm i node-expat\n  \n### Installing on windows?\n\nSee https://github.com/node-xmpp/node-expat/issues/78 if you are getting errors about not finding `nan.h`.\n\n## Testing\n\n```\nnpm test\n```\n\n[![Build Status](https://travis-ci.org/node-xmpp/node-expat.png?branch=v2.1.2)](https://travis-ci.org/node-xmpp/node-expat)\n\n\n## Usage ##\n\nImportant events emitted by a parser:\n\n```javascript\n(function () {\n  \"use strict\";\n\n  var expat = require('node-expat')\n    , parser\n    ;\n\n  parser = new expat.Parser(\"UTF-8\");\n  parser.on('startElement', function (name, attrs) {\n    console.log(name, attrs);\n  });\n  parser.on('endElement', function (name) {\n    console.log(name);\n  });\n  parser.on('text', function (text) {\n    console.log(text);\n  });\n  parser.on('error', function (err) {\n    console.error(err); \n  });\n  parser.write(\"<html><head><title>Hello World</title></head><body><p>Foobar</p></body></html>\");\n}());\n\n```\n\nUse `test.js` for reference.\n\n## API ##\n\n- `#on('startElement' function (name, attrs) {})`\n- `#on('endElement' function (name) {})`\n- `#on('text' function (text) {})`\n- `#on('processingInstruction', function (target, data) {})`\n- `#on('comment', function (s) {})`\n- `#on('xmlDecl', function (version, encoding, standalone) {})`\n- `#on('startCdata', function () {})`\n- `#on('startCdata', function () {})`\n- `#on('endCdata', function () {})`\n- `#on('entityDecl', function (entityName, isParameterEntity, value, base, systemId, publicId, notationName) {})`\n- `#on('error', function (e) {})`\n- `#stop()` pauses\n- `#resume()` resumes\n\n## Error handling ##\n\nWe don't emit an error event because libexpat doesn't use a callback\neither. Instead, check that `parse()` returns `true`. A descriptive\nstring can be obtained via `getError()` to provide user feedback.\n\nAlternatively, use the Parser like a node Stream. `write()` will emit\nerror events.\n\n## Namespace handling ##\n\nA word about special parsing of *xmlns:* this is not neccessary in a\nbare SAX parser like this, given that the DOM replacement you are\nusing (if any) is not relevant to the parser.\n",
  "readmeFilename": "README.markdown",
  "_id": "node-expat@2.1.4",
  "_from": "node-expat@"
}
