{
  "name": "validate",
  "description": "Validate object properties in javascript.",
  "version": "2.1.2",
  "author": {
    "name": "Eivind Fjeldstad"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/eivindfjeldstad/validate"
  },
  "keywords": [
    "validation",
    "validate",
    "valid",
    "object"
  ],
  "scirpts": {
    "test": "make test"
  },
  "dependencies": {
    "eivindfjeldstad-dot": "0.0.1",
    "component-type": "component/type",
    "typecast": "0.0.1"
  },
  "devDependencies": {
    "should": "~2.1.0",
    "mocha": "~1.14.0"
  },
  "readme": "# validate\nValidate object properties in javascript.\n\n[![Build Status](https://travis-ci.org/eivindfjeldstad/validate.png?branch=master)](https://travis-ci.org/eivindfjeldstad/validate)\n\n## Example\n```js\nvar schema = require('validate');\nvar user = schema({\n  name: {\n    type: 'string',\n    required: true,\n    message: 'name is required'\n  },\n  email: {\n    type: 'string',\n    required: true,\n    match: /+\\@.+\\..+/,\n    message: 'email must be valid'\n  },\n  address: {\n    street: {\n      type: 'string',\n      required: true\n    },\n    city: {\n      type: 'string',\n      required: true\n    }\n  },\n});\n  \nvar res = user.validate(obj);\nres.errors; // array of error messages\nres.accepted; // the accepted object\n```\n\nYou can also add paths to a schema by using the chainable API \n```js\nuser\n  .path('username')\n  .type('string')\n  .required()\n  .match(/[a-z]{2,16}/)\n  .message('username must be 2-16 chars');\n\nuser\n  .path('address.zip')\n  .type('string')\n  .required()\n  .match(/[0-9]+/)\n  .message('zip is required');\n```\n## API\n### schema(paths, [opts])\n\n  Creates a new `Schema` with the given paths.\n\n### Schema#path(path, [rules])\n\n  Add path to schema with optional rules. Returns a `Property`.\n\n### Schema#validate(obj, [opts])\n\n  Validate given object. Returns an object containing an array of error messages,\n  `.errors`, and the accepted object, `.accepted`.\n  \n### Schema#assert(obj, [opts])\n\n  Validate given object and throw if the validation fails. Returns the accepted object.\n\n### Property#use(fn, [msg])\n\n  Use the given validation function with and optional error message.\n  `fn` should accept a value and return `true` if the value is considered valid.\n\n### Property#type(name, [msg])\n\n  Property should be of type `name`.\n\n### Property#required(bool, [msg])\n\n  Property is required.\n\n### Property#match(regexp, [msg])\n\n  Proprety should match given `regexp`.\n  \n### Property#message(msg)\n\n  Set default error message for property.\n\n## Licence\nMIT\n\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/eivindfjeldstad/validate/issues"
  },
  "homepage": "https://github.com/eivindfjeldstad/validate",
  "_id": "validate@2.1.2",
  "dist": {
    "shasum": "d08c7fc85e307142f8453c14222030e11e3cce87"
  },
  "_from": "validate@",
  "_resolved": "https://registry.npmjs.org/validate/-/validate-2.1.2.tgz"
}
